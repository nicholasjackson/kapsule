// Code generated by mockery v2.42.3. DO NOT EDIT.

package mocks

import (
	modelfile "github.com/nicholasjackson/llm-image-builder/modelfile"
	mock "github.com/stretchr/testify/mock"
)

// Parser is an autogenerated mock type for the Parser type
type Parser struct {
	mock.Mock
}

// Parse provides a mock function with given fields: file
func (_m *Parser) Parse(file string) (*modelfile.ModelFile, error) {
	ret := _m.Called(file)

	if len(ret) == 0 {
		panic("no return value specified for Parse")
	}

	var r0 *modelfile.ModelFile
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*modelfile.ModelFile, error)); ok {
		return rf(file)
	}
	if rf, ok := ret.Get(0).(func(string) *modelfile.ModelFile); ok {
		r0 = rf(file)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*modelfile.ModelFile)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(file)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewParser creates a new instance of Parser. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewParser(t interface {
	mock.TestingT
	Cleanup(func())
}) *Parser {
	mock := &Parser{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
